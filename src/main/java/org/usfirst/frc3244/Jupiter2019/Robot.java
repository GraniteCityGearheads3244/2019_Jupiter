// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.Jupiter2019;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.cscore.UsbCameraInfo;
import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.DriverStation.Alliance;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3244.Jupiter2019.AutoCommands.ACG_DoNothing;
import org.usfirst.frc3244.Jupiter2019.AutoCommands.Auto_11_Drive_Left_Cargo_Pos1;
import org.usfirst.frc3244.Jupiter2019.AutoCommands.Auto_21_Drive_Right_Cargo_Pos1;
import org.usfirst.frc3244.Jupiter2019.commands.*;
import org.usfirst.frc3244.Jupiter2019.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    public static final boolean DEBUG = false;
    public static final boolean ENABLE_GUITARHERO = true;
    public static final boolean ENABLE_DDR = false;//true;
    public static final boolean DIVERSTATION_REPORTS_ENABLED = false;
    //Command autonomousCommand;
    Command autonomousCommand;
    private String autonomousSelected;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain_1519_MM driveTrain_1519_MM;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static HatchGripper hatchGripper;
    public static Arm_MM arm_MM;
    public static CargoIntake cargoIntake;
    public static Elevator_MotionMagic elevator_MM;
    public static Hatch_Floor_Pick_MM hatch_Floor_Pick_MM;
    public static RGB_LEDs rgb_LEDs;
    public static PowerDistributionPanel pdp;
    
    public static SendableChooser autonomousChooser;
    public static SendableChooser headingChooser;

    


    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
      
        driveTrain_1519_MM = new DriveTrain_1519_MM();
        hatchGripper = new HatchGripper();
        arm_MM = new Arm_MM();
        cargoIntake = new CargoIntake();
        elevator_MM = new Elevator_MotionMagic();
        hatch_Floor_Pick_MM = new Hatch_Floor_Pick_MM();
        rgb_LEDs = new RGB_LEDs();

        driveTrain_1519_MM.init();
        elevator_MM.init();

        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        //Set up Choosers
        setupAutomousChooser();
        setupheadingChooser();
        
        SmartDashboard.putData("Elevator Subsystem" ,elevator_MM);
        SmartDashboard.putData("Arm Subsystem", arm_MM);
        SmartDashboard.putData("Drive Train", driveTrain_1519_MM);
        SmartDashboard.putData("Cargo Intake", cargoIntake);

        //Is there a USB CAMERA???
        UsbCamera cam0 = CameraServer.getInstance().startAutomaticCapture();
        cam0.setFPS(15);
        cam0.setResolution(320,240); // 160x120 or 320x240
        
    }

    private void setupAutomousChooser(){
    	//Create the Auto Chooser
    	//SmartDashboard.putString("autonomous Title", "Autonomous Choice");
        autonomousChooser = new SendableChooser();
        
        // ******* Default Auto
        autonomousChooser.addDefault("99: Auto_99 DoNothing", new ACG_DoNothing());					
        
        // ******* Basic Auto
        autonomousChooser.addObject("0: Auto 11 Drive Left Cargo Pos1", new Auto_11_Drive_Left_Cargo_Pos1());					

        autonomousChooser.addObject("0: Auto 21 Drive Right Cargo Pos1", new Auto_21_Drive_Right_Cargo_Pos1());					
        
        //Place autonomousChooser on the SmartDashboard
        SmartDashboard.putData("Autonomous Chooser", autonomousChooser);
    }

    private void setupheadingChooser(){
        headingChooser = new SendableChooser<>();

        headingChooser.addDefault("North", 0);
        headingChooser.addObject("South", 180);
        headingChooser.addObject("East", 90);
        headingChooser.addObject("West", -90);
        headingChooser.addObject("Rocket Left", -45);
        headingChooser.addObject("Rocket Right", 45);

        //Place autonomousChooser on the SmartDashboard
        SmartDashboard.putData("Start Heading", headingChooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

        //Command ALL Motion Magic systems into Percent output
        Robot.elevator_MM.my_ElevatorStop();
        Robot.arm_MM.my_Arm_Stop();
        Robot.hatch_Floor_Pick_MM.my_Arm_Stop();

        //Robot.driveTrain_1519_MM.driveAutoInTeleopFinished();
        Robot.driveTrain_1519_MM.driveTeleop(0.0, 0.0);
    }

    //Disabled variables
    private Integer scancount = 0 ;
	private Integer sequence = 0 ;
    private Integer count = 0;
    
    @Override
    public void disabledPeriodic() {
        diagnaostics();
        Scheduler.getInstance().run();
        //updateSmartDashboard();
        
        scancount  = scancount+1;
        if (Robot.driveTrain_1519_MM.get_my_Gyro_IsReady()){
            Robot.oi.launchPad.setOutputs(sequence);
        }else{
            Robot.oi.launchPad.setOutputs(1);
        }
		
		if (scancount > 10){
        	sequence = sequence<<1;
        	scancount = 0;
            count = count +1;           

        }

		if (count == 11){
        	sequence = sequence+1;
        	count = 0;
        	//Test SmartDashboar Send the current AutoChoice
        	autonomousSelected = autonomousChooser.getSelected().toString();
        	//Put the selected name on the smartdashboard
            SmartDashboard.putString("Auto Choice", autonomousSelected);
        }
    }

    @Override
    public void autonomousInit() {

        Alliance currentAlliance = DriverStation.getInstance().getAlliance();
        if(currentAlliance == Alliance.Red){
            //Robot.rgb_LEDs.set_myRGB("red1");
        }else if(currentAlliance == Alliance.Blue){
            //Robot.rgb_LEDs.set_myRGB("blue1");
        }

        //Turn off all the Launchpad LEDs
        Robot.oi.launchPad.setOutputs(0);
        
        autonomousCommand = (Command) autonomousChooser.getSelected();
    	autonomousSelected = autonomousChooser.getSelected().toString();
		
    	// schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
            
        driveTrain_1519_MM.setgyroOffset( (Integer) headingChooser.getSelected());

        driveTrain_1519_MM.clearDesiredHeading();
        driveTrain_1519_MM.set_PreserveHeading(true);// When Testing climb we forget to re-enable

        arm_MM.set_armToCurrent();
    }

    boolean autonomousOnce = false;

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        if (!autonomousOnce)
    	{
    	  DriverStation.reportError("My Autonomou Periodic is running!", false);
    	}
        autonomousOnce = true;
        robotControl();
        //Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {

        Alliance currentAlliance = DriverStation.getInstance().getAlliance();
        if(currentAlliance == Alliance.Red){
            Robot.rgb_LEDs.set_myRGB("red2");
        }else if(currentAlliance == Alliance.Blue){
            Robot.rgb_LEDs.set_myRGB("blue2");
        }

        //Turn off all the Launchpad LEDs
    	Robot.oi.launchPad.setOutputs(0); 

        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        //if (autonomousCommand != null) autonomousCommand.cancel();

        driveTrain_1519_MM.clearDesiredHeading();
        driveTrain_1519_MM.set_PreserveHeading(true);// When Testing climb we forget to re-enable

        //arm_MM.set_armToCurrent();

    }

    boolean teleopOnce = false;
    
    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        if (!teleopOnce)
    	{
    	  DriverStation.reportError("My Teleop Periodic is running!", false);
    	}
    	teleopOnce = true;
       
        robotControl();
        //Scheduler.getInstance().run();

    }

    private void robotControl(){
        Scheduler.getInstance().run();
        diagnaostics();
    }

    private void diagnaostics(){
        arm_MM.diagnostics();
        driveTrain_1519_MM.diagnostics();
        SmartDashboard.putBoolean("Target Found", Robot.oi.get_my_LimeLight().getIsTargetFound());
    }
}
