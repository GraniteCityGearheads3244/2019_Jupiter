// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.Jupiter2019;

import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3244.Jupiter2019.commands.*;
import org.usfirst.frc3244.Jupiter2019.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    public static final boolean DEBUG = false;
    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain_1519_MM driveTrain_1519_MM;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static HatchGripper hatchGripper;
    public static Arm_MM arm_MM;
    public static CargoIntake cargoIntake;
    public static Elevator_MotionMagic elevator_MM;
    public static Hatch_Floor_Pick_MM hatch_Floor_Pick_MM;
    public static PowerDistributionPanel pdp;
    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {

        pdp = new PowerDistributionPanel();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain_1519_MM = new DriveTrain_1519_MM();
        //eLevator_MotionMagic = new ELevator_MotionMagic();
        //hatch_Cargo_Arm_PID = new Hatch_Cargo_Arm_PID();
        //floorPick_PID = new FloorPick_PID();
        //cargo_Intake = new Cargo_Intake();
        hatchGripper = new HatchGripper();
        arm_MM = new Arm_MM();
        cargoIntake = new CargoIntake();
        elevator_MM = new Elevator_MotionMagic();
        hatch_Floor_Pick_MM = new Hatch_Floor_Pick_MM();

        driveTrain_1519_MM.init();
        elevator_MM.init();

        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
        CameraServer.getInstance().startAutomaticCapture();


       

    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){
        Robot.elevator_MM.my_ElevatorStop();
        Robot.arm_MM.my_Arm_Stop();
        Robot.hatch_Floor_Pick_MM.my_Arm_Stop();
    }

    //Disabled variables
    private Integer scancount = 0 ;
	private Integer sequence = 0 ;
    private Integer count = 0;
    
    @Override
    public void disabledPeriodic() {
        diagnaostics();
        Scheduler.getInstance().run();
        //updateSmartDashboard();
        
        scancount  = scancount+1;
        if (Robot.driveTrain_1519_MM.get_my_Gyro_IsReady()){
            Robot.oi.launchPad.setOutputs(sequence);
        }else{
            Robot.oi.launchPad.setOutputs(1);
        }
		
		if (scancount > 10){
        	sequence = sequence<<1;
        	scancount = 0;
        	count =count +1;
        }
		if (count == 11){
        	sequence = sequence+1;
        	count = 0;
        	//Test SmartDashboar Send the current AutoChoice
        	//autonomousSelected = autonomousChooser.getSelected().toString();
        	//Put the selected name on the smartdashboard
            //SmartDashboard.putString("Auto Choice", autonomousSelected);
        }
    }

    @Override
    public void autonomousInit() {
        //Turn off all the Launchpad LEDs
        Robot.oi.launchPad.setOutputs(0);
        
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();

        driveTrain_1519_MM.clearDesiredHeading();
        driveTrain_1519_MM.set_PreserveHeading(true);// When Testing climb we forget to re-enable
    }

    boolean autonomousOnce = false;

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        if (!autonomousOnce)
    	{
    	  DriverStation.reportError("My Autonomou Periodic is running!", false);
    	}
        autonomousOnce = true;
        robotControl();
        //Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        //Turn off all the Launchpad LEDs
    	Robot.oi.launchPad.setOutputs(0); 

        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();

        driveTrain_1519_MM.clearDesiredHeading();
        driveTrain_1519_MM.set_PreserveHeading(true);// When Testing climb we forget to re-enable
    }

    boolean teleopOnce = false;
    
    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        if (!teleopOnce)
    	{
    	  DriverStation.reportError("My Teleop Periodic is running!", false);
    	}
    	teleopOnce = true;
       
        robotControl();
        //Scheduler.getInstance().run();

    }

    private void robotControl(){
        Scheduler.getInstance().run();
        driveTrain_1519_MM.driveTeleop(oi.driveY(), oi.driveRotation()*.5); 
        diagnaostics();
    }

    private void diagnaostics(){
        arm_MM.diagnostics();
    }
}
