// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.Jupiter2019.subsystems;

import org.usfirst.frc3244.Jupiter2019.commands.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Hatch_Cargo_Arm_PID extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark motorPositioner;
    private AnalogPotentiometer pot_Position;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /********************************
	 * 
	 * Predefined setpoints
	 * 
	 * ******************************/

	 //home
     private double stow_Position = 0;
     // Safe travle
     private double safe_Travle_Position = 0;
	 //Intake
	 private double Intake_Hatch_Floor_Position = 1;
	 private double Intake_Hatch_Depot_Position = 1;
	 private double Intake_cargo_Floor_Position = 1;
	 private double Intake_cargo_Depot_Position = 1;
	 //Deliver Cargo Bay
	 private double Deliver_Hatch_Bay_Position = 1;
	 private double Deliver_Cargo_Bay_Position = 1;
	 //Deliver Rocken
	 private double Deliver_Hatch_Rocket_Position1 = 2;
	 private double Deliver_Hatch_Rocket_Position2 = 3;
	 private double Deliver_Hatch_Rocket_Position3 = 4;
	 private double Deliver_Cargo_Rocket_Position1 = 5;
	 private double Deliver_Cargo_Rocket_Position2 = 6;
     private double Deliver_Cargo_Rocket_Position3 = 6;
     
     //***    Getters    */
	 //home
	 public double get_stow_Position(){
		return stow_Position;
     }
     // Safe travle
     public double get_safe_Travle_Position(){
         return safe_Travle_Position;
     }
	 //Intake
	 public double get_Intake_Hatch_Floor_Position(){
		return Intake_Hatch_Floor_Position;
	 }
	 public double get_Intake_Hatch_Depot_Position(){
		return Intake_Hatch_Depot_Position;
	 }
	 public double get_Intake_cargo_Floor_Position(){
		return Intake_cargo_Floor_Position;
	 }
	 public double get_Intake_cargo_Depot_Position(){
		return Intake_cargo_Depot_Position;
	 }
	 //Deliver Cargo Bay
	 public double get_Deliver_Hatch_Bay_Position(){
		return Deliver_Hatch_Bay_Position;
	 }
	 public double get_Deliver_Cargo_Bay_Position(){
		return Deliver_Cargo_Bay_Position;
	 }
	 //Deliver Rocket
	 public double get_Deliver_Hatch_Rocket_Position1(){
		return Deliver_Hatch_Rocket_Position1;
	 }
	 public double get_Deliver_Hatch_Rocket_Position2(){
		return Deliver_Hatch_Rocket_Position2;
	 }
	 public double get_Deliver_Hatch_Rocket_Position3(){
		return Deliver_Hatch_Rocket_Position3;
	 }
	 public double get_Deliver_Cargo_Rocket_Position1(){
		return Deliver_Cargo_Rocket_Position1;
	 }
	 public double get_Deliver_Cargo_Rocket_Position2(){
		return Deliver_Cargo_Rocket_Position2;
	 }
	 public double get_Deliver_Cargo_Rocket_Position3(){
		return Deliver_Cargo_Rocket_Position3;
     }
     
    // Initialize your subsystem here
    public Hatch_Cargo_Arm_PID() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("Hatch_Cargo_Arm_PID", 1.0, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        getPIDController().setName("Hatch_Cargo_Arm_PID", "PIDSubsystem Controller");
        LiveWindow.add(getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        motorPositioner = new Spark(0);
        addChild("Motor Positioner",motorPositioner);
        motorPositioner.setInverted(false);
        
        pot_Position = new AnalogPotentiometer(0, 270.0, 0.0);
        addChild("Pot_Position",pot_Position);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    @Override
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return pot_Position.get();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    @Override
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        motorPositioner.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

}
