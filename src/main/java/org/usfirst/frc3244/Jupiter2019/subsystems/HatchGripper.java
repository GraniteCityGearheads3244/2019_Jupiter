// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.Jupiter2019.subsystems;


import org.usfirst.frc3244.Jupiter2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Compressor;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DoubleSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class HatchGripper extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    private Compressor c;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private DoubleSolenoid extender;
    private DoubleSolenoid gripper;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private AnalogInput presureSwitch;

    public HatchGripper() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        extender = new DoubleSolenoid(0, 1, 0);
        addChild("Extender",extender);
        
        
        gripper = new DoubleSolenoid(0, 3, 2);
        addChild("Gripper",gripper);
        
        //
        c = new Compressor(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    presureSwitch = new AnalogInput(3);
        
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        //c.setClosedLoopControl(false);
        my_SmartDashboard();

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void my_extender_Extend(){
        extender.set(Value.kForward);
    }

    public void my_extender_retract(){
        extender.set(Value.kReverse);
    }

    public void my_extender_off(){
        extender.set(Value.kOff);
    }

    public void my_gripper_Grip(){
        gripper.set(Value.kForward);
    }

    public void my_gripper_UnGrip(){
        gripper.set(Value.kReverse);
    }

    public void my_gripper_off(){
        gripper.set(Value.kOff);
    }

    private double get_my_Current_Pressure(){
        return ((250*(presureSwitch.getAverageVoltage()/4.75))-25);
    }

    public void my_SmartDashboard(){
        SmartDashboard.putNumber("Air Presure", get_my_Current_Pressure());
    }

    public void my_enable_Compressor(boolean enable){
        //c.setClosedLoopControl(enable);
    }
}

