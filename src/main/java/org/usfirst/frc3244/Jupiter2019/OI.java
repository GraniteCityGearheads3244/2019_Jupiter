// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.Jupiter2019;

import org.usfirst.frc3244.Jupiter2019.AutoCommands.ACG_Return_to_LoadStation_Left_From_Center;
import org.usfirst.frc3244.Jupiter2019.AutoCommands.ACG_Return_to_LoadStation_Right_From_Center;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_Arm_Hold_Defencive_Position;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_Arm_To_Pick_Cargo;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_Cargo_Intake;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_Elevator_Arm_Reset;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_Elevator_LVL1_Cargo;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_Elevator_LVL1_Cargo_Ship;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_Elevator_LVL1_Hatch;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_Elevator_LVL2_Cargo;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_Elevator_LVL2_Hatch;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_Elevator_LVL3_Cargo;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_Elevator_LVL3_Hatch;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_HatchDeliver;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_HatchDeliverSeqComplete;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_HatchGrabSeqComplete;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_HatchGrabSeqStart;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_Hatch_Pick_From_Floor;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_Hatch_Pick_Prepair_From_Floor;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_LimeLight_Set_Drive_Hatch;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_LimeLight_Set_Target_Left_Hatch;
import org.usfirst.frc3244.Jupiter2019.commandGroups.CG_LimeLight_Set_Target_Right_Hatch;
import org.usfirst.frc3244.Jupiter2019.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import oi.limelightvision.limelight.frc.LimeLight;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc3244.Jupiter2019.subsystems.*;
import org.usfirst.frc3244.Jupiter2019.util.AndJoystickButton;
import org.usfirst.frc3244.Jupiter2019.util.AndNOTJoystickButton2;
import org.usfirst.frc3244.Jupiter2019.util.JoystickAxisButton;
import org.usfirst.frc3244.Jupiter2019.util.JoystickPOVButton;
import org.usfirst.frc3244.Jupiter2019.util.OrJoystickButton;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    private LimeLight limeLight;
    private LimeLight limeLight2;
    public Joystick xBox_Driver;
    public Joystick xBox_CoDriver;
    public Joystick launchPad;
    public Joystick guitarHero;
    public Joystick ddr;

    //Xbox game pad Channels
    public static final int GAMEPAD_XBOX_LEFT_X_AXIS = 0;//
    public static final int GAMEPAD_XBOX_LEFT_Y_AXIS = 1;//
    public static final int GAMEPAD_XBOX_LEFT_TRIGGER = 2;//
    public static final int GAMEPAD_XBOX_RIGHT_TRIGGER = 3;//
    public static final int GAMEPAD_XBOX_RIGHT_X_AXIS = 4;//
    public static final int GAMEPAD_XBOX_RIGHT_Y_AXIS = 5;//
  
    public static final int GAMEPAD_XBOX_A_BUTTON = 1;//
    public static final int GAMEPAD_XBOX_B_BUTTON = 2;//
    public static final int GAMEPAD_XBOX_X_BUTTON = 3;//
    public static final int GAMEPAD_XBOX_Y_BUTTON = 4;//
    public static final int GAMEPAD_XBOX_LEFT_BUTTON = 5;//
    public static final int GAMEPAD_XBOX_RIGHT_BUTTON = 6;//
    public static final int GAMEPAD_XBOX_RESET_BUTTON = 7;//
    public static final int GAMEPAD_XBOX_START_BUTTON = 8;//
    public static final int GAMEPAD_XBOX_LEFT_STICK_BUTTON = 9;
    public static final int GAMEPAD_XBOX_RIGHT_STICK_BUTTON = 10;

    public static final int GUITAR_GREEN = 1;
    public static final int GUITAR_RED = 2;
    public static final int GUITAR_YELLOW = 4;
    public static final int GUITAR_BLUE = 3;
    public static final int GUITAR_ORANGE = 5;
    public static final int GUITAR_BACK = 7;
    public static final int GUITAR_START = 8;
    

     /**
     * Declare Driver Buttons
     */
    public JoystickButton a_xBox_Driver;
    public JoystickButton b_xBox_Driver;
    public JoystickButton x_xBox_Driver;
    public JoystickButton y_xBox_Driver;
    public JoystickButton lb_xBox_Driver;
    public JoystickButton rb_xBox_Driver;
    public JoystickButton r_Stick_Button_xbox_Driver;
    public JoystickButton l_Stick_Button_xbox_Driver;
    public JoystickButton start_xBox_Driver;
    public JoystickButton reset_xBox_Driver;
     
    public JoystickAxisButton rt_xBox_Driver;
    public JoystickAxisButton lt_xBox_Driver;
     
    public JoystickPOVButton povNorth_xBox_Driver;
    public JoystickPOVButton povNorthEast_xBox_Driver;
    public JoystickPOVButton povNorthWest_xBox_Driver;
    public JoystickPOVButton povSouth_xBox_Driver;
    public JoystickPOVButton povSouthEast_xBox_Driver;
    public JoystickPOVButton povSouthWest_xBox_Driver;
    public JoystickPOVButton povWest_xBox_Driver;
    public JoystickPOVButton povEast_xBox_Driver;
    
    /**
     * Declare CoDriver Buttons
     */
    public JoystickButton a_xBox_CoDriver;
    public JoystickButton b_xBox_CoDriver;
    public JoystickButton x_xBox_CoDriver;
    public JoystickButton y_xBox_CoDriver;
    public JoystickButton lb_xBox_CoDriver;
    public JoystickButton rb_xBox_CoDriver;
    public JoystickButton r_Stick_Button_xbox_CoDriver;
    private JoystickAxisButton rJoystickUpDown_CoDriver;
    public JoystickButton l_Stick_Button_xbox_CoDriver;
    private JoystickAxisButton lJoystickUpDown_CoDriver;
    public JoystickButton start_xBox_CoDriver;
    public JoystickButton reset_xBox_CoDriver;
    public JoystickButton lsb_xBox_CoDriver;

    public JoystickAxisButton rt_xBox_CoDriver;
    public JoystickAxisButton lt_xBox_CoDriver;

    public JoystickPOVButton povNorth_xBox_CoDriver;
    public JoystickPOVButton povSouth_xBox_CoDriver;
    public JoystickPOVButton povWest_xBox_CoDriver;
    public JoystickPOVButton povEast_xBox_CoDriver;
   


    public JoystickButton btn1_launchPad;
    public JoystickButton btn2_launchPad;
    public JoystickButton btn3_launchPad;
    public JoystickButton btn4_launchPad;
    public JoystickButton btn5_launchPad;
    public JoystickButton btn6_launchPad;
    public JoystickButton btn7_launchPad;
    public JoystickButton btn8_launchPad;
    public JoystickButton btn9_launchPad;
    public JoystickButton btn10_launchPad;
    public JoystickButton btn11_launchPad;
    
    public AndJoystickButton btn1_;
    public AndJoystickButton btn5_;
    public AndJoystickButton btn4_;
    
    public OrJoystickButton elevator_Down_OR_BTN;

     /**
     * Declare guitar Buttons
     */
    public AndNOTJoystickButton2 guitar_GREEN_BTN_Hatch;
    public AndNOTJoystickButton2 guitar_RED_BTN_Hatch;
    public AndNOTJoystickButton2 guitar_YELLOW_BTN_Hatch;
    public AndNOTJoystickButton2 guitar_BLUE_BTN_Hatch;
    public JoystickButton guitar_ORANGE_BTN_Hatch;
    public AndNOTJoystickButton2 guitar_START_BTN_Hatch;
    public AndNOTJoystickButton2 guitar_BACK_BTN_Hatch;

    public AndJoystickButton guitar_GREEN_BTN_CARGO;
    public AndJoystickButton guitar_RED_BTN_CARGO;
    public AndJoystickButton guitar_YELLOW_BTN_CARGO;
    public AndJoystickButton guitar_BLUE_BTN_CARGO;
    public JoystickPOVButton guitar_STRUM_UP;
    public JoystickPOVButton guitar_STRUM_DOWN;

    public JoystickButton guitar_BACK;

    public JoystickButton ddr_Enable;
    public JoystickButton ddr_NORTH;
    public JoystickButton ddr_SOUTH;
    public JoystickButton ddr_WEST;
    public JoystickButton ddr_EAST;
    public JoystickButton ddr_NORTHWEST;
    public JoystickButton ddr_NORTHEAST;
    public JoystickButton ddr_SOUTHWEST;
    public JoystickButton ddr_SOUTHEAST;


    public static final int DDR_NORTH_PAD = 13;
    public static final int DDR_SOUTH_PAD = 15;
    public static final int DDR_WEST_PAD = 16;
    public static final int DDR_EAST_PAD = 14;
    public static final int DDR_NORTHWEST_PAD = 3;
    public static final int DDR_NORTHEAST_PAD = 2;
    public static final int DDR_SOUTHWEST_PAD = 4;
    public static final int DDR_SOUTHEAST_PAD = 1;
    
    /*
     *	 	LTa2						RTa3
     * 		LB5							LB5
     * 		  -
     * 	+xa0- ya1 LS9
     * 		  +
     * 									Y4
     * 		N			R6	S7		X3		B2
     * 	w		e						A1
     *		S					  
     *							  -
     *						+xa4- ya5 RS10
     *							  +
     */


    public OI() {

      xBox_Driver = new Joystick(0);
    	xBox_CoDriver = new Joystick(1);
      launchPad = new Joystick(2);
      
    	
    	setUp_Controler_xBox_Driver();
    	setUp_Controler_xBox_CoDriver();
    	setUp_Controler_LaunchPad();
    	setUp_AND_Buttons(); //Do this after all joy sticks are declared.
    	setUp_OR_Buttons(); //Do this after all joy sticks are declared. 
    	
      setUp_SmartDashboard_Buttons();
      
      if(Robot.ENABLE_GUITARHERO){
        guitarHero = new Joystick(3);
        setUp_Controler_Guitar_Hero();
      }
      
      if(Robot.ENABLE_DDR){
        ddr = new Joystick(4);
        setUp_Controler_DDR();
      }
  
      limeLight = new LimeLight(); 
      limeLight2 = new LimeLight("limelight-two"); 
    }

    private void setUp_Controler_xBox_Driver(){

        a_xBox_Driver = new JoystickButton(xBox_Driver, GAMEPAD_XBOX_A_BUTTON);
        a_xBox_Driver.whenPressed(new Arm_To_Setpoint(Robot.arm_MM.STOWED));

        b_xBox_Driver = new JoystickButton(xBox_Driver, GAMEPAD_XBOX_B_BUTTON);
        b_xBox_Driver.whileHeld(new Drive_LimeLight_Tracking());

        //setUp_OR_Buttons() x_xBox_Driver = new JoystickButton(xBox_Driver, GAMEPAD_XBOX_X_BUTTON);
        //setUp_OR_Buttons() x_xBox_Driver.whenPressed(new CG_Elevator_Arm_Reset());

        y_xBox_Driver = new JoystickButton(xBox_Driver, GAMEPAD_XBOX_Y_BUTTON);
        y_xBox_Driver.whenPressed(new CG_Arm_To_Pick_Cargo());

        lb_xBox_Driver = new JoystickButton(xBox_Driver, GAMEPAD_XBOX_LEFT_BUTTON);
        lb_xBox_Driver.whenPressed(new CG_HatchGrabSeqStart());
        lb_xBox_Driver.whenReleased(new CG_HatchGrabSeqComplete());

        rb_xBox_Driver = new JoystickButton(xBox_Driver, GAMEPAD_XBOX_RIGHT_BUTTON);
        rb_xBox_Driver.whenPressed(new CG_HatchDeliver());
        rb_xBox_Driver.whenReleased(new CG_HatchDeliverSeqComplete());

        start_xBox_Driver = new JoystickButton(xBox_Driver, GAMEPAD_XBOX_START_BUTTON);
        start_xBox_Driver.whenPressed(new GameMode_Set_Cargo());

        reset_xBox_Driver = new JoystickButton(xBox_Driver, GAMEPAD_XBOX_RESET_BUTTON);
        reset_xBox_Driver.whenPressed(new GameMode_Set_Hatch());

        r_Stick_Button_xbox_Driver = new JoystickButton(xBox_Driver, GAMEPAD_XBOX_RIGHT_STICK_BUTTON);
        r_Stick_Button_xbox_Driver.whileHeld(new Drive_LimeLight_PIDCommand(1)); //Drive_LimeLight_Tracking(1));

        l_Stick_Button_xbox_Driver = new JoystickButton(xBox_Driver, GAMEPAD_XBOX_LEFT_STICK_BUTTON);
        l_Stick_Button_xbox_Driver.whenPressed(new DriveToggleShifter());

        rt_xBox_Driver = new JoystickAxisButton(xBox_Driver, GAMEPAD_XBOX_RIGHT_TRIGGER);
        rt_xBox_Driver.whileHeld(new Cargo_Eject(-1));

        lt_xBox_Driver = new JoystickAxisButton(xBox_Driver, GAMEPAD_XBOX_LEFT_TRIGGER);
        //lt_xBox_Driver.whileHeld(new CG_Cargo_Intake());//Cargo_Intake(1)
        lt_xBox_Driver.whileHeld(new Cargo_Intake(1));

        povNorth_xBox_Driver = new JoystickPOVButton(xBox_Driver, JoystickPOVButton.NORTH);
        povNorth_xBox_Driver.whileHeld(new Drive_Turn_To_Setpoint_InTeleop(0.0, 0.0f));

        povNorthEast_xBox_Driver = new JoystickPOVButton(xBox_Driver, JoystickPOVButton.NORTHEAST);
        povNorthEast_xBox_Driver.whileHeld(new Drive_Turn_To_Setpoint_InTeleop(0.0, -35.0f));

        povEast_xBox_Driver = new JoystickPOVButton(xBox_Driver, JoystickPOVButton.EAST);
        povEast_xBox_Driver.whileHeld(new Drive_Turn_To_Setpoint_InTeleop(0.0, -90.0f));

        povSouthEast_xBox_Driver = new JoystickPOVButton(xBox_Driver, JoystickPOVButton.SOUTHEAST);
        povSouthEast_xBox_Driver.whileHeld(new Drive_Turn_To_Setpoint_InTeleop(0.0, -125.0f));

        povSouth_xBox_Driver = new JoystickPOVButton(xBox_Driver, JoystickPOVButton.SOUTH);
        povSouth_xBox_Driver.whileHeld(new Drive_Turn_To_Setpoint_InTeleop(0.0, 179.0f));

        povSouthWest_xBox_Driver = new JoystickPOVButton(xBox_Driver, JoystickPOVButton.SOUTHWEST);
        povSouthWest_xBox_Driver.whileHeld(new Drive_Turn_To_Setpoint_InTeleop(0.0, 125.0f));

        povWest_xBox_Driver = new JoystickPOVButton(xBox_Driver, JoystickPOVButton.WEST);
        povWest_xBox_Driver.whileHeld(new Drive_Turn_To_Setpoint_InTeleop(0.0, 90.0f));

        povNorthWest_xBox_Driver = new JoystickPOVButton(xBox_Driver, JoystickPOVButton.NORTHWEST);
        povNorthWest_xBox_Driver.whileHeld(new Drive_Turn_To_Setpoint_InTeleop(0.0, 35.0f));

      
    }

    private void setUp_Controler_Guitar_Hero(){

      guitar_ORANGE_BTN_Hatch = new JoystickButton(guitarHero, GUITAR_ORANGE);
      guitar_ORANGE_BTN_Hatch.whenPressed(new CG_Elevator_Arm_Reset());

      guitar_GREEN_BTN_Hatch = new AndNOTJoystickButton2(guitarHero, GUITAR_GREEN, guitarHero, GUITAR_START);
      guitar_GREEN_BTN_Hatch.whenPressed(new CG_Elevator_LVL1_Hatch());

      guitar_RED_BTN_Hatch = new AndNOTJoystickButton2(guitarHero, GUITAR_RED, guitarHero, GUITAR_START);
      guitar_RED_BTN_Hatch.whenPressed(new CG_Elevator_LVL2_Hatch());

      guitar_YELLOW_BTN_Hatch = new AndNOTJoystickButton2(guitarHero, GUITAR_YELLOW, guitarHero, GUITAR_START);
      guitar_YELLOW_BTN_Hatch.whenPressed(new CG_Elevator_LVL3_Hatch());

      guitar_BLUE_BTN_CARGO = new AndJoystickButton(guitarHero, GUITAR_BLUE, guitarHero, GUITAR_START);
      guitar_BLUE_BTN_CARGO.whenPressed(new CG_Elevator_LVL1_Cargo_Ship());

      guitar_GREEN_BTN_CARGO = new AndJoystickButton(guitarHero, GUITAR_GREEN, guitarHero, GUITAR_START);
      guitar_GREEN_BTN_CARGO.whenPressed(new CG_Elevator_LVL1_Cargo());

      guitar_RED_BTN_CARGO = new AndJoystickButton(guitarHero, GUITAR_RED, guitarHero, GUITAR_START);
      guitar_RED_BTN_CARGO.whenPressed(new CG_Elevator_LVL2_Cargo());

      guitar_YELLOW_BTN_CARGO = new AndJoystickButton(guitarHero, GUITAR_YELLOW, guitarHero, GUITAR_START);
      guitar_YELLOW_BTN_CARGO.whenPressed(new CG_Elevator_LVL3_Cargo());
   
      guitar_STRUM_UP = new JoystickPOVButton(guitarHero, JoystickPOVButton.NORTH);
      guitar_STRUM_UP.whenPressed(new CG_Hatch_Pick_From_Floor());

      guitar_STRUM_DOWN = new JoystickPOVButton(guitarHero, JoystickPOVButton.SOUTH);
      guitar_STRUM_DOWN.whenPressed(new CG_Hatch_Pick_Prepair_From_Floor());

      guitar_BACK = new JoystickButton(guitarHero, GUITAR_BACK);
      guitar_BACK.whileHeld(new Elevator_Jog_MotoinMagic_GUITARHERO(false));

    }

    private void setUp_Controler_DDR(){

      ddr_Enable = new JoystickButton(launchPad,8);
      ddr_Enable.whileHeld(new Drive_DDR());
      
      ddr_NORTH = new JoystickButton(ddr, DDR_NORTH_PAD);
      ddr_NORTH.whenPressed(new Drive_DDR_Balanced_Control(true));

      ddr_SOUTH = new JoystickButton(ddr, DDR_SOUTH_PAD);
      ddr_SOUTH.whenPressed(new Drive_DDR_Balanced_Control(false));
      
      ddr_NORTHWEST = new JoystickButton(ddr, DDR_NORTHWEST_PAD);
      ddr_NORTHWEST.whenPressed(new Drive_DDR_Left_Control(true));

      ddr_SOUTHWEST = new JoystickButton(ddr, DDR_SOUTHWEST_PAD);
      ddr_SOUTHWEST.whenPressed(new Drive_DDR_Left_Control(false));

      ddr_NORTHEAST = new JoystickButton(ddr, DDR_NORTHEAST_PAD);
      ddr_NORTHEAST.whenPressed(new Drive_DDR_Right_Control(true));

      ddr_SOUTHEAST = new JoystickButton(ddr, DDR_SOUTHEAST_PAD);
      ddr_SOUTHEAST.whenPressed(new Drive_DDR_Right_Control(false));
    }


    private void setUp_Controler_xBox_CoDriver(){

      //setUp_OR_Buttons() a_xBox_CoDriver = new JoystickButton(xBox_CoDriver, GAMEPAD_XBOX_A_BUTTON);
      //setUp_OR_Buttons() a_xBox_CoDriver.whileHeld(new CG_Elevator_Arm_Reset());
      
      b_xBox_CoDriver = new JoystickButton(xBox_CoDriver, GAMEPAD_XBOX_B_BUTTON);
      b_xBox_CoDriver.whenPressed(new CG_Elevator_LVL1_Hatch());//Elevator_To_Setpoint(Robot.elevator_MM.get_Deliver_Hatch_Rocket_Position1(),false));
      
      x_xBox_CoDriver = new JoystickButton(xBox_CoDriver, GAMEPAD_XBOX_X_BUTTON);
      x_xBox_CoDriver.whenPressed(new CG_Elevator_LVL2_Hatch());//Elevator_To_Setpoint(Robot.elevator_MM.get_Deliver_Hatch_Rocket_Position3(),false));
      
      y_xBox_CoDriver = new JoystickButton(xBox_CoDriver, GAMEPAD_XBOX_Y_BUTTON);
      y_xBox_CoDriver.whenPressed(new CG_Elevator_LVL3_Hatch());//Elevator_To_Setpoint(Robot.elevator_MM.get_Deliver_Hatch_Rocket_Position2(),false));
      
      lb_xBox_CoDriver = new JoystickButton(xBox_CoDriver, GAMEPAD_XBOX_LEFT_BUTTON);
      //lb_xBox_CoDriver.whenPressed(new);
      
      rb_xBox_CoDriver = new JoystickButton(xBox_CoDriver, GAMEPAD_XBOX_RIGHT_BUTTON);
      rb_xBox_CoDriver.whenPressed(new Elevator_To_Setpoint(Robot.elevator_MM.get_bottom_Position(), true));
      
      start_xBox_CoDriver = new JoystickButton(xBox_CoDriver, GAMEPAD_XBOX_START_BUTTON);
      start_xBox_CoDriver.whenPressed(new CG_Hatch_Pick_Prepair_From_Floor());
      
      reset_xBox_CoDriver = new JoystickButton(xBox_CoDriver, GAMEPAD_XBOX_RESET_BUTTON);
      reset_xBox_CoDriver.whenPressed(new CG_Hatch_Pick_From_Floor());
      
      rJoystickUpDown_CoDriver = new JoystickAxisButton(xBox_CoDriver, GAMEPAD_XBOX_RIGHT_Y_AXIS);
      rJoystickUpDown_CoDriver.whileHeld(new Elevator_Jog_MotoinMagic(false));
      
      lJoystickUpDown_CoDriver = new JoystickAxisButton(xBox_CoDriver, GAMEPAD_XBOX_LEFT_Y_AXIS);
      lJoystickUpDown_CoDriver.whileHeld(new Arm_Jog_MotionMagic(false));
      
      r_Stick_Button_xbox_CoDriver = new JoystickButton(xBox_CoDriver, GAMEPAD_XBOX_RIGHT_STICK_BUTTON);
      //r_Stick_Button_xbox_CoDriver.whenPressed(new);
      
      l_Stick_Button_xbox_CoDriver = new JoystickButton(xBox_CoDriver, GAMEPAD_XBOX_LEFT_STICK_BUTTON);
      //l_Stick_Button_xbox_CoDriver.whenPressed(new);

      rt_xBox_CoDriver = new JoystickAxisButton(xBox_CoDriver, GAMEPAD_XBOX_RIGHT_TRIGGER);
      //rt_xBox_CoDriver.whenPressed(new);
      
      lt_xBox_CoDriver = new JoystickAxisButton(xBox_CoDriver, GAMEPAD_XBOX_LEFT_TRIGGER);
      //lt_xBox_CoDriver.whenPressed(new);
      
      povNorth_xBox_CoDriver = new JoystickPOVButton(xBox_CoDriver, JoystickPOVButton.NORTH);
      povNorth_xBox_CoDriver.whenPressed(new CG_Elevator_LVL3_Cargo());
      
      povSouth_xBox_CoDriver = new JoystickPOVButton(xBox_CoDriver, JoystickPOVButton.SOUTH);
      povSouth_xBox_CoDriver.whenPressed(new CG_Elevator_LVL1_Cargo());
      
      povWest_xBox_CoDriver = new JoystickPOVButton(xBox_CoDriver, JoystickPOVButton.WEST);
      povWest_xBox_CoDriver.whenPressed(new CG_Elevator_LVL1_Cargo_Ship());
      
      povEast_xBox_CoDriver = new JoystickPOVButton(xBox_CoDriver, JoystickPOVButton.EAST);
      povEast_xBox_CoDriver.whenPressed(new CG_Elevator_LVL2_Cargo());
    }

    private void setUp_Controler_LaunchPad(){

      btn1_launchPad = new JoystickButton(launchPad,1);
      btn1_launchPad.whenPressed(new ACG_Return_to_LoadStation_Left_From_Center());

      btn2_launchPad = new JoystickButton(launchPad,2);
      btn2_launchPad.whenPressed(new ACG_Return_to_LoadStation_Right_From_Center());

      btn3_launchPad = new JoystickButton(launchPad,3);
      btn3_launchPad.whenPressed(new DriveToggle_Camera());
      btn3_launchPad.whenReleased(new DriveToggle_Camera());

      btn4_launchPad = new JoystickButton(launchPad,4);
      btn4_launchPad.whenPressed(new CG_LimeLight_Set_Drive_Hatch());

      btn5_launchPad = new JoystickButton(launchPad,5);
      btn5_launchPad.whileHeld(new CG_LimeLight_Set_Target_Left_Hatch());

      btn6_launchPad = new JoystickButton(launchPad,6);
      btn6_launchPad.whileHeld(new CG_LimeLight_Set_Target_Right_Hatch());
      
      btn7_launchPad = new JoystickButton(launchPad,7);
      btn7_launchPad.whenPressed(new CG_Arm_Hold_Defencive_Position());

      btn8_launchPad = new JoystickButton(launchPad,8);
      //btn8_launchPad.whileHeld(new CG_Elevator_LVL2_Hatch());

      btn9_launchPad = new JoystickButton(launchPad,9);
      //btn9_launchPad.whileHeld(new CG_Elevator_LVL1_Hatch());

      btn10_launchPad = new JoystickButton(launchPad,9);
      //btn10_launchPad.whileHeld(new Cargo_Intake_Hold());

      //btn11_launchPad Used as a logic over ride = new JoystickButton(launchPad,9);

    }

    private void setUp_AND_Buttons(){

    }

    private void setUp_OR_Buttons(){
      elevator_Down_OR_BTN = new OrJoystickButton(xBox_Driver, GAMEPAD_XBOX_X_BUTTON, xBox_CoDriver, GAMEPAD_XBOX_A_BUTTON);
      elevator_Down_OR_BTN.whenPressed(new CG_Elevator_Arm_Reset());
      
    }

    private void setUp_SmartDashboard_Buttons(){
      //SmartDashboard.putData("Arm UP", new Arm_To_Setpoint(5));
      //SmartDashboard.putData("Arm DWON", new Arm_To_Setpoint(0));
    }



    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getxBox_Driver() {
      return xBox_Driver;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    /**
     * Return Positive Value when Pushed UP
     * @return Y axis Value -1 to 1
     */
    public double co_Driver_Right_AxisY() {
    	// The  "Y" Axis of the Co_Driver Gamepad.
    	// However, the joysticks give -1.0 on the Y axis when pushed forward
    	// This method reverses that, so that positive numbers are forward
    	return -xBox_CoDriver.getRawAxis(GAMEPAD_XBOX_RIGHT_Y_AXIS);
    }

    public double co_Driver_Left_AxisY() {
    	// The  "Y" Axis of the Co_Driver Gamepad.
    	// However, the joysticks give -1.0 on the Y axis when pushed forward
    	// This method reverses that, so that positive numbers are forward
    	return -xBox_CoDriver.getRawAxis(GAMEPAD_XBOX_LEFT_Y_AXIS);
    }
    
    
    public double driveRotation() {
       return stickDeadBand(-xBox_Driver.getRawAxis(GAMEPAD_XBOX_RIGHT_X_AXIS),.2);
    }
      
     public boolean driveTurboMode() {
       return false;//(xBox_Driver.getRawButton(GAMEPAD_XBOX_LEFT_BUTTON) || xBox_Driver.getRawAxis(GAMEPAD_XBOX_LEFT_TRIGGER)>0.2);
        
     }
    public boolean crawlBackward() {
        return false;//(xBox_Driver.getRawButton(GAMEPAD_XBOX_A_BUTTON));
           
     }

    public boolean crawlForward() {
      return false;//(xBox_Driver.getRawButton(GAMEPAD_XBOX_Y_BUTTON));
    }
      
    /*public boolean crawlLeft() {
      return(xBox_Driver.getRawButton(GAMEPAD_XBOX_B_BUTTON));
    }*/
      
    /*public boolean crawlRight() {
      return(xBox_Driver.getRawButton(GAMEPAD_XBOX_X_BUTTON));
    }*/

    private double stickDeadBand(double value, double deadband){
      if(Math.abs(value)<deadband){
        return 0;
      }else{
        return value;
      }
    }

    public double driveY() {
      return(stickDeadBand(-xBox_Driver.getRawAxis(GAMEPAD_XBOX_LEFT_Y_AXIS),.2));
    }

    public LimeLight get_my_LimeLight(){
      return limeLight;
    }

    public LimeLight get_my_LimeLight2(){
      return limeLight2;
    }

	public double guitarHero_Right_AxisY() {
		  return -guitarHero.getRawAxis(5);
	}

}

